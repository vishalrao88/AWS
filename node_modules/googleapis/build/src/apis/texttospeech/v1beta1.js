"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
// tslint:disable: no-namespace
var texttospeech_v1beta1;
(function (texttospeech_v1beta1) {
    /**
     * Cloud Text-to-Speech API
     *
     * Synthesizes natural-sounding speech by applying powerful neural network
     * models.
     *
     * @example
     * const google = require('googleapis');
     * const texttospeech = google.texttospeech('v1beta1');
     *
     * @namespace texttospeech
     * @type {Function}
     * @version v1beta1
     * @variation v1beta1
     * @param {object=} options Options for Texttospeech
     */
    var Texttospeech = /** @class */ (function () {
        function Texttospeech(options, google) {
            this.root = this;
            this._options = options || {};
            this.google = google;
            this.getRoot.bind(this);
            this.text = new Resource$Text(this);
            this.voices = new Resource$Voices(this);
        }
        Texttospeech.prototype.getRoot = function () {
            return this.root;
        };
        return Texttospeech;
    }());
    texttospeech_v1beta1.Texttospeech = Texttospeech;
    var Resource$Text = /** @class */ (function () {
        function Resource$Text(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Text.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Text.prototype.synthesize = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://texttospeech.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1beta1/text:synthesize')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: [],
                pathParams: [],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Text;
    }());
    texttospeech_v1beta1.Resource$Text = Resource$Text;
    var Resource$Voices = /** @class */ (function () {
        function Resource$Voices(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Voices.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Voices.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://texttospeech.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1beta1/voices').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: [],
                pathParams: [],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Voices;
    }());
    texttospeech_v1beta1.Resource$Voices = Resource$Voices;
})(texttospeech_v1beta1 = exports.texttospeech_v1beta1 || (exports.texttospeech_v1beta1 = {}));
//# sourceMappingURL=v1beta1.js.map