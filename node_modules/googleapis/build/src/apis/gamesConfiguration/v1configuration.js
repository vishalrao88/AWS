"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
// tslint:disable: no-namespace
var gamesConfiguration_v1configuration;
(function (gamesConfiguration_v1configuration) {
    /**
     * Google Play Game Services Publishing API
     *
     * The Publishing API for Google Play Game Services.
     *
     * @example
     * const google = require('googleapis');
     * const gamesConfiguration = google.gamesConfiguration('v1configuration');
     *
     * @namespace gamesConfiguration
     * @type {Function}
     * @version v1configuration
     * @variation v1configuration
     * @param {object=} options Options for Gamesconfiguration
     */
    var Gamesconfiguration = /** @class */ (function () {
        function Gamesconfiguration(options, google) {
            this.root = this;
            this._options = options || {};
            this.google = google;
            this.getRoot.bind(this);
            this.achievementConfigurations =
                new Resource$Achievementconfigurations(this);
            this.imageConfigurations = new Resource$Imageconfigurations(this);
            this.leaderboardConfigurations =
                new Resource$Leaderboardconfigurations(this);
        }
        Gamesconfiguration.prototype.getRoot = function () {
            return this.root;
        };
        return Gamesconfiguration;
    }());
    gamesConfiguration_v1configuration.Gamesconfiguration = Gamesconfiguration;
    var Resource$Achievementconfigurations = /** @class */ (function () {
        function Resource$Achievementconfigurations(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Achievementconfigurations.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Achievementconfigurations.prototype.delete = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/games/v1configuration/achievements/{achievementId}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'DELETE'
                }, options),
                params: params,
                requiredParams: ['achievementId'],
                pathParams: ['achievementId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Achievementconfigurations.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/games/v1configuration/achievements/{achievementId}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['achievementId'],
                pathParams: ['achievementId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Achievementconfigurations.prototype.insert = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/games/v1configuration/applications/{applicationId}/achievements')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['applicationId'],
                pathParams: ['applicationId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Achievementconfigurations.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/games/v1configuration/applications/{applicationId}/achievements')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['applicationId'],
                pathParams: ['applicationId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Achievementconfigurations.prototype.patch = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/games/v1configuration/achievements/{achievementId}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'PATCH'
                }, options),
                params: params,
                requiredParams: ['achievementId'],
                pathParams: ['achievementId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Achievementconfigurations.prototype.update = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/games/v1configuration/achievements/{achievementId}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'PUT'
                }, options),
                params: params,
                requiredParams: ['achievementId'],
                pathParams: ['achievementId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Achievementconfigurations;
    }());
    gamesConfiguration_v1configuration.Resource$Achievementconfigurations = Resource$Achievementconfigurations;
    var Resource$Imageconfigurations = /** @class */ (function () {
        function Resource$Imageconfigurations(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Imageconfigurations.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Imageconfigurations.prototype.upload = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/games/v1configuration/images/{resourceId}/imageType/{imageType}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                mediaUrl: (rootUrl +
                    '/upload/games/v1configuration/images/{resourceId}/imageType/{imageType}')
                    .replace(/([^:]\/)\/+/g, '$1'),
                requiredParams: ['resourceId', 'imageType'],
                pathParams: ['imageType', 'resourceId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Imageconfigurations;
    }());
    gamesConfiguration_v1configuration.Resource$Imageconfigurations = Resource$Imageconfigurations;
    var Resource$Leaderboardconfigurations = /** @class */ (function () {
        function Resource$Leaderboardconfigurations(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Leaderboardconfigurations.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Leaderboardconfigurations.prototype.delete = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/games/v1configuration/leaderboards/{leaderboardId}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'DELETE'
                }, options),
                params: params,
                requiredParams: ['leaderboardId'],
                pathParams: ['leaderboardId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Leaderboardconfigurations.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/games/v1configuration/leaderboards/{leaderboardId}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['leaderboardId'],
                pathParams: ['leaderboardId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Leaderboardconfigurations.prototype.insert = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/games/v1configuration/applications/{applicationId}/leaderboards')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['applicationId'],
                pathParams: ['applicationId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Leaderboardconfigurations.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/games/v1configuration/applications/{applicationId}/leaderboards')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['applicationId'],
                pathParams: ['applicationId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Leaderboardconfigurations.prototype.patch = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/games/v1configuration/leaderboards/{leaderboardId}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'PATCH'
                }, options),
                params: params,
                requiredParams: ['leaderboardId'],
                pathParams: ['leaderboardId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Leaderboardconfigurations.prototype.update = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/games/v1configuration/leaderboards/{leaderboardId}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'PUT'
                }, options),
                params: params,
                requiredParams: ['leaderboardId'],
                pathParams: ['leaderboardId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Leaderboardconfigurations;
    }());
    gamesConfiguration_v1configuration.Resource$Leaderboardconfigurations = Resource$Leaderboardconfigurations;
})(gamesConfiguration_v1configuration = exports.gamesConfiguration_v1configuration || (exports.gamesConfiguration_v1configuration = {}));
//# sourceMappingURL=v1configuration.js.map