"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
// tslint:disable: no-namespace
var androiddeviceprovisioning_v1;
(function (androiddeviceprovisioning_v1) {
    /**
     * Android Device Provisioning Partner API
     *
     * Automates Android zero-touch enrollment for device resellers, customers,
     * and EMMs.
     *
     * @example
     * const google = require('googleapis');
     * const androiddeviceprovisioning = google.androiddeviceprovisioning('v1');
     *
     * @namespace androiddeviceprovisioning
     * @type {Function}
     * @version v1
     * @variation v1
     * @param {object=} options Options for Androiddeviceprovisioning
     */
    var Androiddeviceprovisioning = /** @class */ (function () {
        function Androiddeviceprovisioning(options, google) {
            this.root = this;
            this._options = options || {};
            this.google = google;
            this.getRoot.bind(this);
            this.customers = new Resource$Customers(this);
            this.operations = new Resource$Operations(this);
            this.partners = new Resource$Partners(this);
        }
        Androiddeviceprovisioning.prototype.getRoot = function () {
            return this.root;
        };
        return Androiddeviceprovisioning;
    }());
    androiddeviceprovisioning_v1.Androiddeviceprovisioning = Androiddeviceprovisioning;
    var Resource$Customers = /** @class */ (function () {
        function Resource$Customers(root) {
            this.root = root;
            this.getRoot.bind(this);
            this.configurations = new Resource$Customers$Configurations(root);
            this.devices = new Resource$Customers$Devices(root);
            this.dpcs = new Resource$Customers$Dpcs(root);
        }
        Resource$Customers.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Customers.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/customers').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: [],
                pathParams: [],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Customers;
    }());
    androiddeviceprovisioning_v1.Resource$Customers = Resource$Customers;
    var Resource$Customers$Configurations = /** @class */ (function () {
        function Resource$Customers$Configurations(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Customers$Configurations.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Customers$Configurations.prototype.create = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+parent}/configurations')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Customers$Configurations.prototype.delete = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'DELETE'
                }, options),
                params: params,
                requiredParams: ['name'],
                pathParams: ['name'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Customers$Configurations.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['name'],
                pathParams: ['name'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Customers$Configurations.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+parent}/configurations')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Customers$Configurations.prototype.patch = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'PATCH'
                }, options),
                params: params,
                requiredParams: ['name'],
                pathParams: ['name'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Customers$Configurations;
    }());
    androiddeviceprovisioning_v1.Resource$Customers$Configurations = Resource$Customers$Configurations;
    var Resource$Customers$Devices = /** @class */ (function () {
        function Resource$Customers$Devices(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Customers$Devices.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Customers$Devices.prototype.applyConfiguration = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+parent}/devices:applyConfiguration')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Customers$Devices.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['name'],
                pathParams: ['name'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Customers$Devices.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+parent}/devices')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Customers$Devices.prototype.removeConfiguration = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+parent}/devices:removeConfiguration')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Customers$Devices.prototype.unclaim = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+parent}/devices:unclaim')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Customers$Devices;
    }());
    androiddeviceprovisioning_v1.Resource$Customers$Devices = Resource$Customers$Devices;
    var Resource$Customers$Dpcs = /** @class */ (function () {
        function Resource$Customers$Dpcs(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Customers$Dpcs.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Customers$Dpcs.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+parent}/dpcs')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Customers$Dpcs;
    }());
    androiddeviceprovisioning_v1.Resource$Customers$Dpcs = Resource$Customers$Dpcs;
    var Resource$Operations = /** @class */ (function () {
        function Resource$Operations(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Operations.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Operations.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['name'],
                pathParams: ['name'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Operations;
    }());
    androiddeviceprovisioning_v1.Resource$Operations = Resource$Operations;
    var Resource$Partners = /** @class */ (function () {
        function Resource$Partners(root) {
            this.root = root;
            this.getRoot.bind(this);
            this.customers = new Resource$Partners$Customers(root);
            this.devices = new Resource$Partners$Devices(root);
        }
        Resource$Partners.prototype.getRoot = function () {
            return this.root;
        };
        return Resource$Partners;
    }());
    androiddeviceprovisioning_v1.Resource$Partners = Resource$Partners;
    var Resource$Partners$Customers = /** @class */ (function () {
        function Resource$Partners$Customers(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Partners$Customers.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Partners$Customers.prototype.create = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+parent}/customers')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Partners$Customers.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/partners/{+partnerId}/customers')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['partnerId'],
                pathParams: ['partnerId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Partners$Customers;
    }());
    androiddeviceprovisioning_v1.Resource$Partners$Customers = Resource$Partners$Customers;
    var Resource$Partners$Devices = /** @class */ (function () {
        function Resource$Partners$Devices(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Partners$Devices.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Partners$Devices.prototype.claim = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/partners/{+partnerId}/devices:claim')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['partnerId'],
                pathParams: ['partnerId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Partners$Devices.prototype.claimAsync = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/partners/{+partnerId}/devices:claimAsync')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['partnerId'],
                pathParams: ['partnerId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Partners$Devices.prototype.findByIdentifier = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/v1/partners/{+partnerId}/devices:findByIdentifier')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['partnerId'],
                pathParams: ['partnerId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Partners$Devices.prototype.findByOwner = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/partners/{+partnerId}/devices:findByOwner')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['partnerId'],
                pathParams: ['partnerId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Partners$Devices.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['name'],
                pathParams: ['name'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Partners$Devices.prototype.metadata = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/v1/partners/{+metadataOwnerId}/devices/{+deviceId}/metadata')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['metadataOwnerId', 'deviceId'],
                pathParams: ['deviceId', 'metadataOwnerId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Partners$Devices.prototype.unclaim = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/partners/{+partnerId}/devices:unclaim')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['partnerId'],
                pathParams: ['partnerId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Partners$Devices.prototype.unclaimAsync = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1/partners/{+partnerId}/devices:unclaimAsync')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['partnerId'],
                pathParams: ['partnerId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Partners$Devices.prototype.updateMetadataAsync = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl ||
                'https://androiddeviceprovisioning.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/v1/partners/{+partnerId}/devices:updateMetadataAsync')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['partnerId'],
                pathParams: ['partnerId'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Partners$Devices;
    }());
    androiddeviceprovisioning_v1.Resource$Partners$Devices = Resource$Partners$Devices;
})(androiddeviceprovisioning_v1 = exports.androiddeviceprovisioning_v1 || (exports.androiddeviceprovisioning_v1 = {}));
//# sourceMappingURL=v1.js.map