"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
// tslint:disable: no-namespace
var dns_v1;
(function (dns_v1) {
    /**
     * Google Cloud DNS API
     *
     * Configures and serves authoritative DNS records.
     *
     * @example
     * const google = require('googleapis');
     * const dns = google.dns('v1');
     *
     * @namespace dns
     * @type {Function}
     * @version v1
     * @variation v1
     * @param {object=} options Options for Dns
     */
    var Dns = /** @class */ (function () {
        function Dns(options, google) {
            this.root = this;
            this._options = options || {};
            this.google = google;
            this.getRoot.bind(this);
            this.changes = new Resource$Changes(this);
            this.dnsKeys = new Resource$Dnskeys(this);
            this.managedZoneOperations = new Resource$Managedzoneoperations(this);
            this.managedZones = new Resource$Managedzones(this);
            this.projects = new Resource$Projects(this);
            this.resourceRecordSets = new Resource$Resourcerecordsets(this);
        }
        Dns.prototype.getRoot = function () {
            return this.root;
        };
        return Dns;
    }());
    dns_v1.Dns = Dns;
    var Resource$Changes = /** @class */ (function () {
        function Resource$Changes(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Changes.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Changes.prototype.create = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/dns/v1/projects/{project}/managedZones/{managedZone}/changes')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['project', 'managedZone'],
                pathParams: ['managedZone', 'project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Changes.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/dns/v1/projects/{project}/managedZones/{managedZone}/changes/{changeId}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['project', 'managedZone', 'changeId'],
                pathParams: ['changeId', 'managedZone', 'project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Changes.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/dns/v1/projects/{project}/managedZones/{managedZone}/changes')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['project', 'managedZone'],
                pathParams: ['managedZone', 'project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Changes;
    }());
    dns_v1.Resource$Changes = Resource$Changes;
    var Resource$Dnskeys = /** @class */ (function () {
        function Resource$Dnskeys(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Dnskeys.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Dnskeys.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/dns/v1/projects/{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['project', 'managedZone', 'dnsKeyId'],
                pathParams: ['dnsKeyId', 'managedZone', 'project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Dnskeys.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/dns/v1/projects/{project}/managedZones/{managedZone}/dnsKeys')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['project', 'managedZone'],
                pathParams: ['managedZone', 'project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Dnskeys;
    }());
    dns_v1.Resource$Dnskeys = Resource$Dnskeys;
    var Resource$Managedzoneoperations = /** @class */ (function () {
        function Resource$Managedzoneoperations(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Managedzoneoperations.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Managedzoneoperations.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/dns/v1/projects/{project}/managedZones/{managedZone}/operations/{operation}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['project', 'managedZone', 'operation'],
                pathParams: ['managedZone', 'operation', 'project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Managedzoneoperations.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/dns/v1/projects/{project}/managedZones/{managedZone}/operations')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['project', 'managedZone'],
                pathParams: ['managedZone', 'project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Managedzoneoperations;
    }());
    dns_v1.Resource$Managedzoneoperations = Resource$Managedzoneoperations;
    var Resource$Managedzones = /** @class */ (function () {
        function Resource$Managedzones(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Managedzones.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Managedzones.prototype.create = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/dns/v1/projects/{project}/managedZones')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['project'],
                pathParams: ['project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Managedzones.prototype.delete = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/dns/v1/projects/{project}/managedZones/{managedZone}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'DELETE'
                }, options),
                params: params,
                requiredParams: ['project', 'managedZone'],
                pathParams: ['managedZone', 'project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Managedzones.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/dns/v1/projects/{project}/managedZones/{managedZone}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['project', 'managedZone'],
                pathParams: ['managedZone', 'project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Managedzones.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/dns/v1/projects/{project}/managedZones')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['project'],
                pathParams: ['project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Managedzones.prototype.patch = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/dns/v1/projects/{project}/managedZones/{managedZone}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'PATCH'
                }, options),
                params: params,
                requiredParams: ['project', 'managedZone'],
                pathParams: ['managedZone', 'project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Managedzones.prototype.update = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/dns/v1/projects/{project}/managedZones/{managedZone}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'PUT'
                }, options),
                params: params,
                requiredParams: ['project', 'managedZone'],
                pathParams: ['managedZone', 'project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Managedzones;
    }());
    dns_v1.Resource$Managedzones = Resource$Managedzones;
    var Resource$Projects = /** @class */ (function () {
        function Resource$Projects(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Projects.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Projects.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/dns/v1/projects/{project}')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['project'],
                pathParams: ['project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Projects;
    }());
    dns_v1.Resource$Projects = Resource$Projects;
    var Resource$Resourcerecordsets = /** @class */ (function () {
        function Resource$Resourcerecordsets(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Resourcerecordsets.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Resourcerecordsets.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl +
                        '/dns/v1/projects/{project}/managedZones/{managedZone}/rrsets')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['project', 'managedZone'],
                pathParams: ['managedZone', 'project'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Resourcerecordsets;
    }());
    dns_v1.Resource$Resourcerecordsets = Resource$Resourcerecordsets;
})(dns_v1 = exports.dns_v1 || (exports.dns_v1 = {}));
//# sourceMappingURL=v1.js.map