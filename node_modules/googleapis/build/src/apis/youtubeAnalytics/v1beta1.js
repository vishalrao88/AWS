"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
// tslint:disable: no-namespace
var youtubeAnalytics_v1beta1;
(function (youtubeAnalytics_v1beta1) {
    /**
     * YouTube Analytics API
     *
     * Retrieves your YouTube Analytics data.
     *
     * @example
     * const google = require('googleapis');
     * const youtubeAnalytics = google.youtubeAnalytics('v1beta1');
     *
     * @namespace youtubeAnalytics
     * @type {Function}
     * @version v1beta1
     * @variation v1beta1
     * @param {object=} options Options for Youtubeanalytics
     */
    var Youtubeanalytics = /** @class */ (function () {
        function Youtubeanalytics(options, google) {
            this.root = this;
            this._options = options || {};
            this.google = google;
            this.getRoot.bind(this);
            this.groupItems = new Resource$Groupitems(this);
            this.groups = new Resource$Groups(this);
            this.reports = new Resource$Reports(this);
        }
        Youtubeanalytics.prototype.getRoot = function () {
            return this.root;
        };
        return Youtubeanalytics;
    }());
    youtubeAnalytics_v1beta1.Youtubeanalytics = Youtubeanalytics;
    var Resource$Groupitems = /** @class */ (function () {
        function Resource$Groupitems(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Groupitems.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Groupitems.prototype.delete = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/youtube/analytics/v1beta1/groupItems')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'DELETE'
                }, options),
                params: params,
                requiredParams: ['id'],
                pathParams: [],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Groupitems.prototype.insert = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/youtube/analytics/v1beta1/groupItems')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: [],
                pathParams: [],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Groupitems.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/youtube/analytics/v1beta1/groupItems')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['groupId'],
                pathParams: [],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Groupitems;
    }());
    youtubeAnalytics_v1beta1.Resource$Groupitems = Resource$Groupitems;
    var Resource$Groups = /** @class */ (function () {
        function Resource$Groups(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Groups.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Groups.prototype.delete = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/youtube/analytics/v1beta1/groups')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'DELETE'
                }, options),
                params: params,
                requiredParams: ['id'],
                pathParams: [],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Groups.prototype.insert = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/youtube/analytics/v1beta1/groups')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: [],
                pathParams: [],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Groups.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/youtube/analytics/v1beta1/groups')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: [],
                pathParams: [],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Groups.prototype.update = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/youtube/analytics/v1beta1/groups')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'PUT'
                }, options),
                params: params,
                requiredParams: [],
                pathParams: [],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Groups;
    }());
    youtubeAnalytics_v1beta1.Resource$Groups = Resource$Groups;
    var Resource$Reports = /** @class */ (function () {
        function Resource$Reports(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Reports.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Reports.prototype.query = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://www.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/youtube/analytics/v1beta1/reports')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['ids', 'start-date', 'end-date', 'metrics'],
                pathParams: [],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Reports;
    }());
    youtubeAnalytics_v1beta1.Resource$Reports = Resource$Reports;
})(youtubeAnalytics_v1beta1 = exports.youtubeAnalytics_v1beta1 || (exports.youtubeAnalytics_v1beta1 = {}));
//# sourceMappingURL=v1beta1.js.map