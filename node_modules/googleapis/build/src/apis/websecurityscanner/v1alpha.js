"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apirequest_1 = require("../../lib/apirequest");
// TODO: We will eventually get the `any` in here cleared out, but in the
// interim we want to turn on no-implicit-any.
// tslint:disable: no-any
// tslint:disable: class-name
// tslint:disable: variable-name
// tslint:disable: jsdoc-format
// tslint:disable: no-namespace
var websecurityscanner_v1alpha;
(function (websecurityscanner_v1alpha) {
    /**
     * Web Security Scanner API
     *
     * Web Security Scanner API (under development).
     *
     * @example
     * const google = require('googleapis');
     * const websecurityscanner = google.websecurityscanner('v1alpha');
     *
     * @namespace websecurityscanner
     * @type {Function}
     * @version v1alpha
     * @variation v1alpha
     * @param {object=} options Options for Websecurityscanner
     */
    var Websecurityscanner = /** @class */ (function () {
        function Websecurityscanner(options, google) {
            this.root = this;
            this._options = options || {};
            this.google = google;
            this.getRoot.bind(this);
            this.projects = new Resource$Projects(this);
        }
        Websecurityscanner.prototype.getRoot = function () {
            return this.root;
        };
        return Websecurityscanner;
    }());
    websecurityscanner_v1alpha.Websecurityscanner = Websecurityscanner;
    var Resource$Projects = /** @class */ (function () {
        function Resource$Projects(root) {
            this.root = root;
            this.getRoot.bind(this);
            this.scanConfigs = new Resource$Projects$Scanconfigs(root);
        }
        Resource$Projects.prototype.getRoot = function () {
            return this.root;
        };
        return Resource$Projects;
    }());
    websecurityscanner_v1alpha.Resource$Projects = Resource$Projects;
    var Resource$Projects$Scanconfigs = /** @class */ (function () {
        function Resource$Projects$Scanconfigs(root) {
            this.root = root;
            this.getRoot.bind(this);
            this.scanRuns = new Resource$Projects$Scanconfigs$Scanruns(root);
        }
        Resource$Projects$Scanconfigs.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Projects$Scanconfigs.prototype.create = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://websecurityscanner.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1alpha/{+parent}/scanConfigs')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Projects$Scanconfigs.prototype.delete = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://websecurityscanner.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'DELETE'
                }, options),
                params: params,
                requiredParams: ['name'],
                pathParams: ['name'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Projects$Scanconfigs.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://websecurityscanner.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['name'],
                pathParams: ['name'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Projects$Scanconfigs.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://websecurityscanner.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1alpha/{+parent}/scanConfigs')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Projects$Scanconfigs.prototype.patch = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://websecurityscanner.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'PATCH'
                }, options),
                params: params,
                requiredParams: ['name'],
                pathParams: ['name'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Projects$Scanconfigs.prototype.start = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://websecurityscanner.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1alpha/{+name}:start')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['name'],
                pathParams: ['name'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Projects$Scanconfigs;
    }());
    websecurityscanner_v1alpha.Resource$Projects$Scanconfigs = Resource$Projects$Scanconfigs;
    var Resource$Projects$Scanconfigs$Scanruns = /** @class */ (function () {
        function Resource$Projects$Scanconfigs$Scanruns(root) {
            this.root = root;
            this.getRoot.bind(this);
            this.crawledUrls =
                new Resource$Projects$Scanconfigs$Scanruns$Crawledurls(root);
            this.findings = new Resource$Projects$Scanconfigs$Scanruns$Findings(root);
            this.findingTypeStats =
                new Resource$Projects$Scanconfigs$Scanruns$Findingtypestats(root);
        }
        Resource$Projects$Scanconfigs$Scanruns.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Projects$Scanconfigs$Scanruns.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://websecurityscanner.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['name'],
                pathParams: ['name'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Projects$Scanconfigs$Scanruns.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://websecurityscanner.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1alpha/{+parent}/scanRuns')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Projects$Scanconfigs$Scanruns.prototype.stop = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://websecurityscanner.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1alpha/{+name}:stop')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'POST'
                }, options),
                params: params,
                requiredParams: ['name'],
                pathParams: ['name'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Projects$Scanconfigs$Scanruns;
    }());
    websecurityscanner_v1alpha.Resource$Projects$Scanconfigs$Scanruns = Resource$Projects$Scanconfigs$Scanruns;
    var Resource$Projects$Scanconfigs$Scanruns$Crawledurls = /** @class */ (function () {
        function Resource$Projects$Scanconfigs$Scanruns$Crawledurls(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Projects$Scanconfigs$Scanruns$Crawledurls.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Projects$Scanconfigs$Scanruns$Crawledurls.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://websecurityscanner.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1alpha/{+parent}/crawledUrls')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Projects$Scanconfigs$Scanruns$Crawledurls;
    }());
    websecurityscanner_v1alpha.Resource$Projects$Scanconfigs$Scanruns$Crawledurls = Resource$Projects$Scanconfigs$Scanruns$Crawledurls;
    var Resource$Projects$Scanconfigs$Scanruns$Findings = /** @class */ (function () {
        function Resource$Projects$Scanconfigs$Scanruns$Findings(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Projects$Scanconfigs$Scanruns$Findings.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Projects$Scanconfigs$Scanruns$Findings.prototype.get = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://websecurityscanner.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1alpha/{+name}').replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['name'],
                pathParams: ['name'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        Resource$Projects$Scanconfigs$Scanruns$Findings.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://websecurityscanner.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1alpha/{+parent}/findings')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Projects$Scanconfigs$Scanruns$Findings;
    }());
    websecurityscanner_v1alpha.Resource$Projects$Scanconfigs$Scanruns$Findings = Resource$Projects$Scanconfigs$Scanruns$Findings;
    var Resource$Projects$Scanconfigs$Scanruns$Findingtypestats = /** @class */ (function () {
        function Resource$Projects$Scanconfigs$Scanruns$Findingtypestats(root) {
            this.root = root;
            this.getRoot.bind(this);
        }
        Resource$Projects$Scanconfigs$Scanruns$Findingtypestats.prototype.getRoot = function () {
            return this.root;
        };
        Resource$Projects$Scanconfigs$Scanruns$Findingtypestats.prototype.list = function (paramsOrCallback, optionsOrCallback, callback) {
            var params = (paramsOrCallback || {});
            var options = (optionsOrCallback || {});
            if (typeof paramsOrCallback === 'function') {
                callback = paramsOrCallback;
                params = {};
                options = {};
            }
            if (typeof optionsOrCallback === 'function') {
                callback = optionsOrCallback;
                options = {};
            }
            var rootUrl = options.rootUrl || 'https://websecurityscanner.googleapis.com/';
            var parameters = {
                options: Object.assign({
                    url: (rootUrl + '/v1alpha/{+parent}/findingTypeStats')
                        .replace(/([^:]\/)\/+/g, '$1'),
                    method: 'GET'
                }, options),
                params: params,
                requiredParams: ['parent'],
                pathParams: ['parent'],
                context: this.getRoot()
            };
            if (callback) {
                apirequest_1.createAPIRequest(parameters, callback);
            }
            else {
                return apirequest_1.createAPIRequest(parameters);
            }
        };
        return Resource$Projects$Scanconfigs$Scanruns$Findingtypestats;
    }());
    websecurityscanner_v1alpha.Resource$Projects$Scanconfigs$Scanruns$Findingtypestats = Resource$Projects$Scanconfigs$Scanruns$Findingtypestats;
})(websecurityscanner_v1alpha = exports.websecurityscanner_v1alpha || (exports.websecurityscanner_v1alpha = {}));
//# sourceMappingURL=v1alpha.js.map